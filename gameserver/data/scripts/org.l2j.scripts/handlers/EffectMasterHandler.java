package handlers;

import handlers.effecthandlers.*;
import org.l2j.gameserver.handler.EffectHandler;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * Effect Master handler.
 * @author NosBit
 */
public final class EffectMasterHandler
{
    private static final Logger LOGGER = LoggerFactory.getLogger(EffectMasterHandler.class.getName());

    public static void main(String[] args) {
        var handler = EffectHandler.getInstance();
        handler.registerHandler("AbnormalShield", AbnormalShield::new);
        handler.registerHandler("AbnormalVisualEffect", VisualEffect::new);
        handler.registerHandler("Accuracy", Accuracy::new);
        handler.registerHandler("AddHate", AddHate::new);
        handler.registerHandler("AddTeleportBookmarkSlot", AddTeleportBookmarkSlot::new);
        handler.registerHandler("AgathionSlot", AgathionSlot::new);
        handler.registerHandler("AreaDamage", AreaDamage::new);
        handler.registerHandler("AttackAttribute", AttackAttribute::new);
        handler.registerHandler("AttackTrait", AttackTrait::new);
        handler.registerHandler("Backstab", Backstab::new);
        handler.registerHandler("Betray", Betray::new);
        handler.registerHandler("BlockAbnormalSlot", BlockAbnormalSlot::new);
        handler.registerHandler("BlockAction", BlockAction::new);
        handler.registerHandler("BlockActions", BlockActions::new);
        handler.registerHandler("BlockChat", BlockChat::new);
        handler.registerHandler("BlockControl", BlockControl::new);
        handler.registerHandler("BlockEscape", BlockEscape::new);
        handler.registerHandler("BlockMove", BlockMove::new);
        handler.registerHandler("BlockParty", BlockParty::new);
        handler.registerHandler("BlockResurrection", BlockResurrection::new);
        handler.registerHandler("BlockSkill", BlockSkill::new);
        handler.registerHandler("BlockTarget", BlockTarget::new);
        handler.registerHandler("Bluff", Bluff::new);
        handler.registerHandler("BonusDropRate", BonusDropRate::new);
        handler.registerHandler("Breath", Breath::new);
        handler.registerHandler("BuffBlock", BuffBlock::new);
        handler.registerHandler("CallParty", CallParty::new);
        handler.registerHandler("CallPc", CallPc::new);
        handler.registerHandler("CallSkill", CallSkill::new);
        handler.registerHandler("CheapShot", CheapShot::new);
        handler.registerHandler("ChameleonRest", ChameleonRest::new);
        handler.registerHandler("ChangeFace", ChangeFace::new);
        handler.registerHandler("ChangeHairColor", ChangeHairColor::new);
        handler.registerHandler("ChangeHairStyle", ChangeHairStyle::new);
        handler.registerHandler("Confuse", Confuse::new);
        handler.registerHandler("ConsumeBody", ConsumeBody::new);
        handler.registerHandler("ConvertItem", ConvertItem::new);
        handler.registerHandler("CounterPhysicalSkill", CounterPhysicalSkill::new);
        handler.registerHandler("Cp", Cp::new);
        handler.registerHandler("CpHeal", CpHeal::new);
        handler.registerHandler("CpHealPercent", CpHealPercent::new);
        handler.registerHandler("CpRegen", CpRegen::new);
        handler.registerHandler("CriticalDamage", CriticalDamage::new);
        handler.registerHandler("CriticalDamagePosition", CriticalDamagePosition::new);
        handler.registerHandler("CriticalRate", CriticalRate::new);
        handler.registerHandler("CriticalRatePositionBonus", CriticalRatePositionBonus::new);
        handler.registerHandler("CubicMastery", CubicMastery::new);
        handler.registerHandler("DamageBlock", DamageBlock::new);
        handler.registerHandler("DamageByAttack", DamageByAttack::new);
        handler.registerHandler("DamageShield", DamageShield::new);
        handler.registerHandler("DamageShieldResist", DamageShieldResist::new);
        handler.registerHandler("DamOverTime", DamOverTime::new);
        handler.registerHandler("DamOverTimePercent", DamOverTimePercent::new);
        handler.registerHandler("DeathLink", DeathLink::new);
        handler.registerHandler("DebuffBlock", DebuffBlock::new);
        handler.registerHandler("DefenceAttribute", DefenceAttribute::new);
        handler.registerHandler("DefenceCriticalDamage", DefenceCriticalDamage::new);
        handler.registerHandler("DefenceCriticalRate", DefenceCriticalRate::new);
        handler.registerHandler("DefenceMagicCriticalDamage", DefenceMagicCriticalDamage::new);
        handler.registerHandler("DefenceMagicCriticalRate", DefenceMagicCriticalRate::new);
        handler.registerHandler("DefenceTrait", DefenceTrait::new);
        handler.registerHandler("DeleteHate", DeleteHate::new);
        handler.registerHandler("DeleteHateOfMe", DeleteHateOfMe::new);
        handler.registerHandler("Detection", Detection::new);
        handler.registerHandler("DisableTargeting", DisableTargeting::new);
        handler.registerHandler("Disarm", Disarm::new);
        handler.registerHandler("DispelAll", DispelAll::new);
        handler.registerHandler("DispelByCategory", DispelByCategory::new);
        handler.registerHandler("DispelBySlot", DispelBySlot::new);
        handler.registerHandler("DispelBySlotMyself", DispelBySlotMyself::new);
        handler.registerHandler("DispelBySlotProbability", DispelBySlotProbability::new);
        handler.registerHandler("ElementalSpiritAttack", ElementalSpiritAttack::new);
        handler.registerHandler("ElementalSpiritDefense", ElementalSpiritDefense::new);
        handler.registerHandler("EnergyAttack", EnergyAttack::new);
        handler.registerHandler("EnlargeAbnormalSlot", EnlargeAbnormalSlot::new);
        handler.registerHandler("EnlargeSlot", EnlargeSlot::new);
        handler.registerHandler("Escape", Escape::new);
        handler.registerHandler("ExpModify", ExpModify::new);
        handler.registerHandler("FakeDeath", FakeDeath::new);
        handler.registerHandler("FatalBlow", FatalBlow::new);
        handler.registerHandler("FatalBlowRate", FatalBlowRate::new);
        handler.registerHandler("Fear", Fear::new);
        handler.registerHandler("Feed", Feed::new);
        handler.registerHandler("FishingExpSpBonus", FishingExpSpBonus::new);
        handler.registerHandler("Flag", Flag::new);
        handler.registerHandler("FocusEnergy", FocusEnergy::new);
        handler.registerHandler("FocusMomentum", FocusMomentum::new);
        handler.registerHandler("FocusMaxMomentum", FocusMaxMomentum::new);
        handler.registerHandler("FocusSouls", FocusSouls::new);
        handler.registerHandler("GetAgro", GetAgro::new);
        handler.registerHandler("GetDamageLimit", GetDamageLimit::new);
        handler.registerHandler("GiveClanReputation", GiveClanReputation::new);
        handler.registerHandler("GiveSp", GiveSp::new);
        handler.registerHandler("GiveXp", GiveXp::new);
        handler.registerHandler("GiveExpAndSp", GiveExpAndSp::new);
        handler.registerHandler("Grow", Grow::new);
        handler.registerHandler("HairAccessorySet", HairAccessorySet::new);
        handler.registerHandler("HeadquarterCreate", HeadquarterCreate::new);
        handler.registerHandler("Heal", Heal::new);
        handler.registerHandler("HealEffect", HealEffect::new);
        handler.registerHandler("HealOverTime", HealOverTime::new);
        handler.registerHandler("HealPercent", HealPercent::new);
        handler.registerHandler("Hide", Hide::new);
        handler.registerHandler("HitAtNight", HitAtNight::new);
        handler.registerHandler("HitNumber", HitNumber::new);
        handler.registerHandler("Hp", Hp::new);
        handler.registerHandler("HpByLevel", HpByLevel::new);
        handler.registerHandler("HpCpHeal", HpCpHeal::new);
        handler.registerHandler("HpDrain", HpDrain::new);
        handler.registerHandler("HpRegen", HpRegen::new);
        handler.registerHandler("IgnoreDeath", IgnoreDeath::new);
        handler.registerHandler("ImmobilePetBuff", ImmobilePetBuff::new);
        handler.registerHandler("JewelSlot", JewelSlot::new);
        handler.registerHandler("KnockBack", KnockBack::new);
        handler.registerHandler("Lethal", Lethal::new);
        handler.registerHandler("LimitCp", LimitCp::new);
        handler.registerHandler("LimitHp", LimitHp::new);
        handler.registerHandler("LimitMp", LimitMp::new);
        handler.registerHandler("Lucky", Lucky::new);
        handler.registerHandler("MagicAccuracy", MagicAccuracy::new);
        handler.registerHandler("MagicalAbnormalResist", MagicalAbnormalResist::new);
        handler.registerHandler("MagicalAttack", MagicalAttack::new);
        handler.registerHandler("MagicalAttackByAbnormal", MagicalAttackByAbnormal::new);
        handler.registerHandler("MagicalAttackByAbnormalSlot", MagicalAttackByAbnormalSlot::new);
        handler.registerHandler("MagicalAttackMp", MagicalAttackMp::new);
        handler.registerHandler("MagicalAttackRange", MagicalAttackRange::new);
        handler.registerHandler("MagicalAttackSpeed", MagicalAttackSpeed::new);
        handler.registerHandler("MagicalDefence", MagicalDefence::new);
        handler.registerHandler("MagicalEvasion", MagicalEvasion::new);
        handler.registerHandler("MagicalSkillPower", MagicalSkillPower::new);
        handler.registerHandler("MagicalSoulAttack", MagicalSoulAttack::new);
        handler.registerHandler("MagicCriticalDamage", MagicCriticalDamage::new);
        handler.registerHandler("MagicCriticalRate", MagicCriticalRate::new);
        handler.registerHandler("MagicMpCost", MagicMpCost::new);
        handler.registerHandler("ManaCharge", ManaCharge::new);
        handler.registerHandler("ManaDamOverTime", ManaDamOverTime::new);
        handler.registerHandler("ManaHeal", ManaHeal::new);
        handler.registerHandler("ManaHealByLevel", ManaHealByLevel::new);
        handler.registerHandler("ManaHealOverTime", ManaHealOverTime::new);
        handler.registerHandler("ManaHealPercent", ManaHealPercent::new);
        handler.registerHandler("MAtk", MAtk::new);
        handler.registerHandler("MaxCp", MaxCp::new);
        handler.registerHandler("MaxHp", MaxHp::new);
        handler.registerHandler("MaxMp", MaxMp::new);
        handler.registerHandler("ModifyVital", ModifyVital::new);
        handler.registerHandler("Mp", Mp::new);
        handler.registerHandler("MpConsumePerLevel", MpConsumePerLevel::new);
        handler.registerHandler("MpRegen", MpRegen::new);
        handler.registerHandler("MpShield", MpShield::new);
        handler.registerHandler("MpVampiricAttack", MpVampiricAttack::new);
        handler.registerHandler("Mute", Mute::new);
        handler.registerHandler("NoblesseBless", NoblesseBless::new);
        handler.registerHandler("OpenChest", OpenChest::new);
        handler.registerHandler("OpenCommonRecipeBook", OpenCommonRecipeBook::new);
        handler.registerHandler("OpenDoor", OpenDoor::new);
        handler.registerHandler("OpenDwarfRecipeBook", OpenDwarfRecipeBook::new);
        handler.registerHandler("Passive", Passive::new);
        handler.registerHandler("PAtk", PAtk::new);
        handler.registerHandler("PhysicalAbnormalResist", PhysicalAbnormalResist::new);
        handler.registerHandler("PhysicalAttack", PhysicalAttack::new);
        handler.registerHandler("PhysicalAttackHpLink", PhysicalAttackHpLink::new);
        handler.registerHandler("PhysicalAttackMute", PhysicalAttackMute::new);
        handler.registerHandler("PhysicalAttackRange", PhysicalAttackRange::new);
        handler.registerHandler("PhysicalAttackSpeed", PhysicalAttackSpeed::new);
        handler.registerHandler("PhysicalDefence", PhysicalDefence::new);
        handler.registerHandler("PhysicalEvasion", PhysicalEvasion::new);
        handler.registerHandler("PhysicalMute", PhysicalMute::new);
        handler.registerHandler("PhysicalShieldAngleAll", PhysicalShieldAngleAll::new);
        handler.registerHandler("PhysicalSkillPower", PhysicalSkillPower::new);
        handler.registerHandler("PhysicalSoulAttack", PhysicalSoulAttack::new);
        handler.registerHandler("PkCount", PkCount::new);
        handler.registerHandler("PolearmSingleTarget", PolearmSingleTarget::new);
        handler.registerHandler("ProtectionBlessing", ProtectionBlessing::new);
        handler.registerHandler("PullBack", PullBack::new);
        handler.registerHandler("PveMagicalSkillDamageBonus", PveMagicalSkillDamageBonus::new);
        handler.registerHandler("PveMagicalSkillDefenceBonus", PveMagicalSkillDefenceBonus::new);
        handler.registerHandler("PvePhysicalAttackDamageBonus", PvePhysicalAttackDamageBonus::new);
        handler.registerHandler("PvePhysicalAttackDefenceBonus", PvePhysicalAttackDefenceBonus::new);
        handler.registerHandler("PvePhysicalSkillDamageBonus", PvePhysicalSkillDamageBonus::new);
        handler.registerHandler("PvePhysicalSkillDefenceBonus", PvePhysicalSkillDefenceBonus::new);
        handler.registerHandler("PvpMagicalSkillDamageBonus", PvpMagicalSkillDamageBonus::new);
        handler.registerHandler("PvpMagicalSkillDefenceBonus", PvpMagicalSkillDefenceBonus::new);
        handler.registerHandler("PvpPhysicalAttackDamageBonus", PvpPhysicalAttackDamageBonus::new);
        handler.registerHandler("PvpPhysicalAttackDefenceBonus", PvpPhysicalAttackDefenceBonus::new);
        handler.registerHandler("PvpPhysicalSkillDamageBonus", PvpPhysicalSkillDamageBonus::new);
        handler.registerHandler("PvpPhysicalSkillDefenceBonus", PvpPhysicalSkillDefenceBonus::new);
        handler.registerHandler("RandomizeHate", RandomizeHate::new);
        handler.registerHandler("RealDamage", RealDamage::new);
        handler.registerHandler("RebalanceHP", RebalanceHP::new);
        handler.registerHandler("ReduceDamage", ReduceDamage::new);
        handler.registerHandler("ReduceCancel", ReduceCancel::new);
        handler.registerHandler("ReduceDropPenalty", ReduceDropPenalty::new);
        handler.registerHandler("ReflectMagic", ReflectMagic::new);
        handler.registerHandler("ReflectSkill", ReflectSkill::new);
        handler.registerHandler("Relax", Relax::new);
        handler.registerHandler("ResistAbnormalByCategory", ResistAbnormalByCategory::new);
        handler.registerHandler("ResistDDMagic", ResistDDMagic::new);
        handler.registerHandler("ResistDispelByCategory", ResistDispelByCategory::new);
        handler.registerHandler("Restoration", Restoration::new);
        handler.registerHandler("RestorationRandom", RestorationRandom::new);
        handler.registerHandler("Resurrection", Resurrection::new);
        handler.registerHandler("ResurrectionSpecial", ResurrectionSpecial::new);
        handler.registerHandler("Reuse", Reuse::new);
        handler.registerHandler("ReuseSkillById", ReuseSkillById::new);
        handler.registerHandler("Root", Root::new);
        handler.registerHandler("SafeFallHeight", SafeFallHeight::new);
        handler.registerHandler("SendSystemMessageToClan", SendSystemMessageToClan::new);
        handler.registerHandler("ServitorShare", ServitorShare::new);
        handler.registerHandler("ShieldDefence", ShieldDefence::new);
        handler.registerHandler("ShieldDefenceRate", ShieldDefenceRate::new);
        handler.registerHandler("SilentMove", SilentMove::new);
        handler.registerHandler("SkillCritical", SkillCritical::new);
        handler.registerHandler("SkillCriticalProbability", SkillCriticalProbability::new);
        handler.registerHandler("SkillEvasion", SkillEvasion::new);
        handler.registerHandler("SkillTurning", SkillTurning::new);
        handler.registerHandler("SoulBlow", SoulBlow::new);
        handler.registerHandler("SoulEating", SoulEating::new);
        handler.registerHandler("Speed", Speed::new);
        handler.registerHandler("SpiritXpModify", SpiritXpModify::new);
        handler.registerHandler("SpModify", SpModify::new);
        handler.registerHandler("Spoil", Spoil::new);
        handler.registerHandler("StatByMoveType", StatByMoveType::new);
        handler.registerHandler("StatUp", StatUp::new);
        handler.registerHandler("StealAbnormal", StealAbnormal::new);
        handler.registerHandler("Summon", Summon::new);
        handler.registerHandler("SummonAgathion", SummonAgathion::new);
        handler.registerHandler("SummonCubic", SummonCubic::new);
        handler.registerHandler("SummonNpc", SummonNpc::new);
        handler.registerHandler("SummonPet", SummonPet::new);
        handler.registerHandler("Sweeper", Sweeper::new);
        handler.registerHandler("TakeCastle", TakeCastle::new);
        handler.registerHandler("TakeCastleStart", TakeCastleStart::new);
        handler.registerHandler("TalismanSlot", TalismanSlot::new);
        handler.registerHandler("TargetCancel", TargetCancel::new);
        handler.registerHandler("TargetMe", TargetMe::new);
        handler.registerHandler("TargetMeProbability", TargetMeProbability::new);
        handler.registerHandler("Teleport", Teleport::new);
        handler.registerHandler("TeleportToTarget", TeleportToTarget::new);
        handler.registerHandler("TransferDamageToPlayer", TransferDamageToPlayer::new);
        handler.registerHandler("TransferDamageToSummon", TransferDamageToSummon::new);
        handler.registerHandler("TransferHate", TransferHate::new);
        handler.registerHandler("Transformation", Transformation::new);
        handler.registerHandler("TriggerSkillByAttack", TriggerSkillByAttack::new);
        handler.registerHandler("TriggerSkillByAvoid", TriggerSkillByAvoid::new);
        handler.registerHandler("TriggerSkillByDamage", TriggerSkillByDamage::new);
        handler.registerHandler("TriggerSkillByMagicType", TriggerSkillByMagicType::new);
        handler.registerHandler("TriggerSkillBySkill", TriggerSkillBySkill::new);
        handler.registerHandler("TwoHandedBluntBonus", TwoHandedBluntBonus::new);
        handler.registerHandler("TwoHandedSwordBonus", TwoHandedSwordBonus::new);
        handler.registerHandler("Unsummon", Unsummon::new);
        handler.registerHandler("UnsummonAgathion", UnsummonAgathion::new);
        handler.registerHandler("VampiricAttack", VampiricAttack::new);
        handler.registerHandler("WeightLimit", WeightLimit::new);
        handler.registerHandler("WeightPenalty", WeightPenalty::new);
        handler.registerHandler("WorldChatPoints", WorldChatPoints::new);
        LOGGER.info("Loaded {} effect handlers.", EffectHandler.getInstance().size());
    }
}

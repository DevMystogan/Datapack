package handlers;

import handlers.effecthandlers.*;
import handlers.effecthandlers.stat.*;
import org.l2j.gameserver.handler.EffectHandler;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * Effect Master handler.
 * @author NosBit
 */
public final class EffectMasterHandler {

    private static final Logger LOGGER = LoggerFactory.getLogger(EffectMasterHandler.class);

    public static void main(String[] args) {
        var handler = EffectHandler.getInstance();
        handler.registerFactory("AbnormalShield", AbnormalShield::new);
        handler.registerFactory("AddHate", AddHate::new);
        handler.registerFactory("AddTeleportBookmarkSlot", AddTeleportBookmarkSlot::new);
        handler.registerFactory("stat-modify", StatModify::new);
        handler.registerFactory("attack-trait", AttackTrait::new); // TODO
        handler.registerFactory("backstab", Backstab::new);
        handler.registerFactory("Betray", Betray::new);
        handler.registerFactory("block-abnormal", BlockAbnormalSlot::new);
        handler.registerFactory("block-action", BlockAction::new);
        handler.registerFactory("block-all-actions", BlockActions::new);
        handler.registerFactory("BlockChat", BlockChat::new);
        handler.registerFactory("BlockControl", BlockControl::new);
        handler.registerFactory("BlockEscape", BlockEscape::new);
        handler.registerFactory("BlockMove", BlockMove::new);
        handler.registerFactory("BlockParty", BlockParty::new);
        handler.registerFactory("BlockResurrection", BlockResurrection::new);
        handler.registerFactory("block-skill", BlockSkill::new);
        handler.registerFactory("BlockTarget", BlockTarget::new);
        handler.registerFactory("Bluff", Bluff::new);
        handler.registerFactory("BuffBlock", BuffBlock::new);
        handler.registerFactory("CallParty", CallParty::new);
        handler.registerFactory("call-pc", CallPc::new);
        handler.registerFactory("call-skill", CallSkill::new);
        handler.registerFactory("CheapShot", CheapShot::new);
        handler.registerFactory("ChameleonRest", ChameleonRest::new);
        handler.registerFactory("ChangeFace", ChangeFace::new);
        handler.registerFactory("ChangeHairColor", ChangeHairColor::new);
        handler.registerFactory("ChangeHairStyle", ChangeHairStyle::new);
        handler.registerFactory("Confuse", Confuse::new);
        handler.registerFactory("ConsumeBody", ConsumeBody::new);
        handler.registerFactory("ConvertItem", ConvertItem::new);
        handler.registerFactory("cp", Cp::new);
        handler.registerFactory("CpHeal", CpHeal::new);
        handler.registerFactory("CpHealPercent", CpHealPercent::new);
        handler.registerFactory("stat-position-based", StatPositionBased::new);
        handler.registerFactory("stat-hp-based", StatHpBased::new);
        handler.registerFactory("damage-block ", DamageBlock::new);
        handler.registerFactory("damage-by-attack", DamageByAttack::new);
        handler.registerFactory("damage-over-time", DamOverTime::new);
        handler.registerFactory("DeathLink", DeathLink::new);
        handler.registerFactory("DebuffBlock", DebuffBlock::new);
        handler.registerFactory("defence-trait", DefenceTrait::new); // TODO
        handler.registerFactory("DeleteHate", DeleteHate::new);
        handler.registerFactory("DeleteHateOfMe", DeleteHateOfMe::new);
        handler.registerFactory("Detection", Detection::new);
        handler.registerFactory("DisableTargeting", DisableTargeting::new);
        handler.registerFactory("Disarm", Disarm::new);
        handler.registerFactory("DispelAll", DispelAll::new);
        handler.registerFactory("dispel-by-category", DispelByCategory::new);
        handler.registerFactory("DispelBySlot", DispelBySlot::new); // TODO
        handler.registerFactory("dispel-myself", DispelBySlotMyself::new);
        handler.registerFactory("dispel-probability", DispelBySlotProbability::new);
        handler.registerFactory("energy-attack", EnergyAttack::new);
        handler.registerFactory("EnlargeAbnormalSlot", EnlargeAbnormalSlot::new);
        handler.registerFactory("enlarge-slot", EnlargeSlot::new);
        handler.registerFactory("escape", Escape::new);
        handler.registerFactory("FakeDeath", FakeDeath::new);
        handler.registerFactory("fatal-blow", FatalBlow::new);
        handler.registerFactory("Fear", Fear::new);
        handler.registerFactory("feed", Feed::new);
        handler.registerFactory("Flag", Flag::new);
        handler.registerFactory("FocusMomentum'", FocusMomentum::new);
        handler.registerFactory("FocusMaxMomentum", FocusMaxMomentum::new);
        handler.registerFactory("FocusSouls", FocusSouls::new);
        handler.registerFactory("GetAgro", GetAgro::new);
        handler.registerFactory("GiveClanReputation", GiveClanReputation::new);
        handler.registerFactory("GiveSp", GiveSp::new);
        handler.registerFactory("GiveXp", GiveXp::new);
        handler.registerFactory("acquire-xp-sp", GiveExpAndSp::new);
        handler.registerFactory("Grow", Grow::new);
        handler.registerFactory("HairAccessorySet", HairAccessorySet::new);
        handler.registerFactory("headquarter", HeadquarterCreate::new);
        handler.registerFactory("Heal", Heal::new);
        handler.registerFactory("HealOverTime", HealOverTime::new);
        handler.registerFactory("HealPercent", HealPercent::new);
        handler.registerFactory("Hide", Hide::new);
        handler.registerFactory("hp", Hp::new);
        handler.registerFactory("HpByLevel", HpByLevel::new);
        handler.registerFactory("HpCpHeal", HpCpHeal::new);
        handler.registerFactory("hp-drain", HpDrain::new);
        handler.registerFactory("IgnoreDeath", IgnoreDeath::new);
        handler.registerFactory("ImmobilePetBuff", ImmobilePetBuff::new);
        handler.registerFactory("knockback", KnockBack::new);
        handler.registerFactory("lethal", Lethal::new);
        handler.registerFactory("Lucky", Lucky::new);
        handler.registerFactory("magical-attack", MagicalAttack::new);
        handler.registerFactory("MagicalAttackByAbnormal", MagicalAttackByAbnormal::new);
        handler.registerFactory("magical-attack-by-abnormal", MagicalAttackByAbnormalSlot::new);
        handler.registerFactory("magical-attack-mp", MagicalAttackMp::new);
        handler.registerFactory("magical-attack-range", MagicalAttackRange::new);
        handler.registerFactory("MagicalSoulAttack", MagicalSoulAttack::new);
        handler.registerFactory("magic-cost", MagicMpCost::new);
        handler.registerFactory("ManaDamOverTime", ManaDamOverTime::new);
        handler.registerFactory("ManaHeal", ManaHeal::new);
        handler.registerFactory("ManaHealByLevel", ManaHealByLevel::new);
        handler.registerFactory("ManaHealOverTime", ManaHealOverTime::new);
        handler.registerFactory("ManaHealPercent", ManaHealPercent::new);
        handler.registerFactory("MaxCp", MaxCp::new);
        handler.registerFactory("MaxHp", MaxHp::new);
        handler.registerFactory("MaxMp", MaxMp::new);
        handler.registerFactory("ModifyVital", ModifyVital::new);
        handler.registerFactory("Mp", Mp::new);
        handler.registerFactory("MpConsumePerLevel", MpConsumePerLevel::new);
        handler.registerFactory("MpRegen", MpRegen::new);
        handler.registerFactory("MpShield", MpShield::new);
        handler.registerFactory("MpVampiricAttack", MpVampiricAttack::new);
        handler.registerFactory("Mute", Mute::new);
        handler.registerFactory("NoblesseBless", NoblesseBless::new);
        handler.registerFactory("OpenChest", OpenChest::new);
        handler.registerFactory("OpenCommonRecipeBook", OpenCommonRecipeBook::new);
        handler.registerFactory("OpenDoor", OpenDoor::new);
        handler.registerFactory("OpenDwarfRecipeBook", OpenDwarfRecipeBook::new);
        handler.registerFactory("Passive", Passive::new);
        handler.registerFactory("PAtk", PAtk::new);
        handler.registerFactory("PhysicalAbnormalResist", PhysicalAbnormalResist::new);
        handler.registerFactory("PhysicalAttack", PhysicalAttack::new);
        handler.registerFactory("PhysicalAttackHpLink", PhysicalAttackHpLink::new);
        handler.registerFactory("PhysicalAttackMute", PhysicalAttackMute::new);
        handler.registerFactory("PhysicalAttackRange", PhysicalAttackRange::new);
        handler.registerFactory("PhysicalAttackSpeed", PhysicalAttackSpeed::new);
        handler.registerFactory("PhysicalDefence", PhysicalDefence::new);
        handler.registerFactory("PhysicalEvasion", PhysicalEvasion::new);
        handler.registerFactory("PhysicalMute", PhysicalMute::new);
        handler.registerFactory("PhysicalShieldAngleAll", PhysicalShieldAngleAll::new);
        handler.registerFactory("PhysicalSkillPower", PhysicalSkillPower::new);
        handler.registerFactory("PhysicalSoulAttack", PhysicalSoulAttack::new);
        handler.registerFactory("PkCount", PkCount::new);
        handler.registerFactory("PolearmSingleTarget", PolearmSingleTarget::new);
        handler.registerFactory("ProtectionBlessing", ProtectionBlessing::new);
        handler.registerFactory("PullBack", PullBack::new);
        handler.registerFactory("PveMagicalSkillDamageBonus", PveMagicalSkillDamageBonus::new);
        handler.registerFactory("PveMagicalSkillDefenceBonus", PveMagicalSkillDefenceBonus::new);
        handler.registerFactory("PvePhysicalAttackDamageBonus", PvePhysicalAttackDamageBonus::new);
        handler.registerFactory("PvePhysicalAttackDefenceBonus", PvePhysicalAttackDefenceBonus::new);
        handler.registerFactory("PvePhysicalSkillDamageBonus", PvePhysicalSkillDamageBonus::new);
        handler.registerFactory("PvePhysicalSkillDefenceBonus", PvePhysicalSkillDefenceBonus::new);
        handler.registerFactory("PvpMagicalSkillDamageBonus", PvpMagicalSkillDamageBonus::new);
        handler.registerFactory("PvpMagicalSkillDefenceBonus", PvpMagicalSkillDefenceBonus::new);
        handler.registerFactory("PvpPhysicalAttackDamageBonus", PvpPhysicalAttackDamageBonus::new);
        handler.registerFactory("PvpPhysicalAttackDefenceBonus", PvpPhysicalAttackDefenceBonus::new);
        handler.registerFactory("PvpPhysicalSkillDamageBonus", PvpPhysicalSkillDamageBonus::new);
        handler.registerFactory("PvpPhysicalSkillDefenceBonus", PvpPhysicalSkillDefenceBonus::new);
        handler.registerFactory("RandomizeHate", RandomizeHate::new);
        handler.registerFactory("RealDamage", RealDamage::new);
        handler.registerFactory("RebalanceHP", RebalanceHP::new);
        handler.registerFactory("ReduceDamage", ReduceDamage::new);
        handler.registerFactory("ReduceCancel", ReduceCancel::new);
        handler.registerFactory("ReduceDropPenalty", ReduceDropPenalty::new);
        handler.registerFactory("ReflectMagic", ReflectMagic::new);
        handler.registerFactory("ReflectSkill", ReflectSkill::new);
        handler.registerFactory("Relax", Relax::new);
        handler.registerFactory("ResistAbnormalByCategory", ResistAbnormalByCategory::new);
        handler.registerFactory("ResistDDMagic", ResistDDMagic::new);
        handler.registerFactory("ResistDispelByCategory", ResistDispelByCategory::new);
        handler.registerFactory("Restoration", Restoration::new);
        handler.registerFactory("RestorationRandom", RestorationRandom::new);
        handler.registerFactory("Resurrection", Resurrection::new);
        handler.registerFactory("ResurrectionSpecial", ResurrectionSpecial::new);
        handler.registerFactory("Reuse", Reuse::new);
        handler.registerFactory("ReuseSkillById", ReuseSkillById::new);
        handler.registerFactory("Root", Root::new);
        handler.registerFactory("SafeFallHeight", SafeFallHeight::new);
        handler.registerFactory("SendSystemMessageToClan", SendSystemMessageToClan::new);
        handler.registerFactory("ServitorShare", ServitorShare::new);
        handler.registerFactory("ShieldDefence", ShieldDefence::new);
        handler.registerFactory("ShieldDefenceRate", ShieldDefenceRate::new);
        handler.registerFactory("SilentMove", SilentMove::new);
        handler.registerFactory("SkillCritical", SkillCritical::new);
        handler.registerFactory("SkillCriticalProbability", SkillCriticalProbability::new);
        handler.registerFactory("SkillEvasion", SkillEvasion::new);
        handler.registerFactory("SkillTurning", SkillTurning::new);
        handler.registerFactory("SoulBlow", SoulBlow::new);
        handler.registerFactory("SoulEating", SoulEating::new);
        handler.registerFactory("Speed", Speed::new);
        handler.registerFactory("SpiritXpModify", SpiritXpModify::new);
        handler.registerFactory("SpModify", SpModify::new);
        handler.registerFactory("Spoil", Spoil::new);
        handler.registerFactory("StatByMoveType", StatByMoveType::new);
        handler.registerFactory("StatUp", StatUp::new);
        handler.registerFactory("StealAbnormal", StealAbnormal::new);
        handler.registerFactory("Summon", Summon::new);
        handler.registerFactory("SummonAgathion", SummonAgathion::new);
        handler.registerFactory("SummonCubic", SummonCubic::new);
        handler.registerFactory("SummonNpc", SummonNpc::new);
        handler.registerFactory("SummonPet", SummonPet::new);
        handler.registerFactory("Sweeper", Sweeper::new);
        handler.registerFactory("TakeCastle", TakeCastle::new);
        handler.registerFactory("TakeCastleStart", TakeCastleStart::new);
        handler.registerFactory("TalismanSlot", TalismanSlot::new);
        handler.registerFactory("TargetCancel", TargetCancel::new);
        handler.registerFactory("TargetMe", TargetMe::new);
        handler.registerFactory("TargetMeProbability", TargetMeProbability::new);
        handler.registerFactory("Teleport", Teleport::new);
        handler.registerFactory("TeleportToTarget", TeleportToTarget::new);
        handler.registerFactory("TransferDamageToPlayer", TransferDamageToPlayer::new);
        handler.registerFactory("TransferDamageToSummon", TransferDamageToSummon::new);
        handler.registerFactory("TransferHate", TransferHate::new);
        handler.registerFactory("Transformation", Transformation::new);
        handler.registerFactory("TriggerSkillByAttack", TriggerSkillByAttack::new);
        handler.registerFactory("TriggerSkillByAvoid", TriggerSkillByAvoid::new);
        handler.registerFactory("TriggerSkillByDamage", TriggerSkillByDamage::new);
        handler.registerFactory("TriggerSkillByMagicType", TriggerSkillByMagicType::new);
        handler.registerFactory("TriggerSkillBySkill", TriggerSkillBySkill::new);
        handler.registerFactory("TwoHandedBluntBonus", TwoHandedBluntBonus::new);
        handler.registerFactory("TwoHandedSwordBonus", TwoHandedSwordBonus::new);
        handler.registerFactory("Unsummon", Unsummon::new);
        handler.registerFactory("UnsummonAgathion", UnsummonAgathion::new);
        handler.registerFactory("VampiricAttack", VampiricAttack::new);
        handler.registerFactory("WeightLimit", WeightLimit::new);
        handler.registerFactory("WeightPenalty", WeightPenalty::new);
        handler.registerFactory("WorldChatPoints", WorldChatPoints::new);
        LOGGER.info("Loaded {} effect handlers.", EffectHandler.getInstance().size());
    }
}
